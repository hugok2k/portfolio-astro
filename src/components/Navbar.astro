---
import Menu from './svg/menu.astro'
import Moon from './svg/moon.astro'
---

<header class='headerContainer'>
  <nav class='nav'>
    <a class='textLogo' href='/#' aria-label='Volver al inicio'>
      <svg xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 24 24'>
        <path
          d='M3.6 5.7V10c0 1.3-.4 2-1.3 2.1.9.1 1.3.8 1.3 2v4.4c0 .2 0 .3.1.4.1.1.2.1.4.1H5v1.2H3.6c-.5 0-.9-.1-1.2-.4-.2-.3-.3-.6-.3-1.2v-4.2c0-.6-.1-1.1-.3-1.4-.2-.3-.6-.5-1.1-.5H.4v-1.2h.3c.5 0 .9-.2 1.1-.5.2-.3.3-.8.3-1.4V5.6c0-1 .5-1.6 1.5-1.6H5v1.2h-.8c-.2 0-.4 0-.4.1-.1.1-.2.3-.2.4z'
          class='colorBra'
        >
        </path>
        <path
          d='M9.8 6.7h1.6v10.8H9.8v-4.7H7.6v4.7H6V6.7h1.6v4.8h2.3l-.1-4.8zm7.3 10.8-.4-2.5h-2.3l-.4 2.5h-1.6l1.9-10.8h2.3l2.1 10.8h-1.6zm-2.5-3.8h1.9l-1-5.7-.9 5.7z'
        >
        </path>
        <path
          d='M20.4 10.1V5.7c0-.2 0-.3-.1-.4-.1-.1-.2-.1-.4-.1H19V4h1.4c.5 0 .9.1 1.1.4.2.3.3.6.3 1.1v4.1c0 .7.1 1.1.3 1.4.2.3.6.5 1.1.5h.3v1.2h-.3c-.5 0-.9.1-1.1.4-.2.3-.3.8-.3 1.4v4.2c0 .5-.1.9-.3 1.2-.2.3-.6.4-1.1.4H19v-1.2h.8c.2 0 .4 0 .4-.1.1-.1.1-.2.1-.4v-4.4c0-1.3.4-1.9 1.3-2-.8-.2-1.2-.9-1.2-2.1z'
          class='colorBra'
        >
        </path>
      </svg>
    </a>
    <span class='navToggle'>
      <Menu />
    </span>
    <div class='menu' id='menu'>
      <a class='btnNavbar' href='/#project' id='linkProject'> .proyectos<span class='colorBra'>()</span></a>
      <a class='btnNavbar' href='/#skills' id='linkSkills'> .habilidades<span class='colorBra'>()</span></a>
      <a class='btnNavbar' href='/#about' id='linkAbout'> .sobre mí<span class='colorBra'>()</span></a>
      <a class='btnNavbar' href='/#contact' id='linkContact'> .contacto<span class='colorBra'>()</span></a>
      <button class='usermode' title='darkmode' aria-label='Cambiar a modo oscuro o claro.'>
        <span class='moon'><Moon /></span>
      </button>
    </div>
  </nav>
</header>
<style>
  .usermode {
    width: 20px;
    height: 20px;
    background-color: var(--color-bg);
    border: none;
    margin-left: 30px;
  }
  .moon {
    position: relative;
    fill: var(--color-text-base);
    transition: fill 0.3s;
    cursor: pointer;
  }
  .moon:hover {
    fill: var(--color-primary);
  }
  .fa-bars {
    color: var(--color-primary);
    font-size: 30px;
    padding: 0 10px 0 10px;
    transition: all 0.3s linear;
  }
  .fa-bars:hover {
    color: var(--color-secondary);
    transition: all 0.3s linear;
  }
  .headerContainer {
    position: fixed;
    background-color: var(--color-bg);
    width: 100%;
    top: 0;
    left: 0;
    z-index: 1;
  }
  .nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 32px 10px 26px;
    font-weight: 600;
    max-width: 820px;
    margin: 0 auto;
  }
  .colorBra {
    color: var(--color-primary);
    fill: var(--color-primary);
    transition: fill color 0.3s;
  }
  .navToggle {
    display: none;
    cursor: pointer;
    fill: var(--color-primary);
  }
  .navToggle:hover {
    fill: #fff;
  }
  .textLogo {
    width: 40px;
    height: 40px;
    fill: var(--color-text-base);
    transition: fill 0.3s;
  }
  .textLogo:hover {
    fill: var(--color-primary);
  }
  .textLogo:hover .colorBra {
    fill: #fff;
  }
  .menu {
    display: flex;
    flex-direction: row;
    font-size: 18px;
  }
  .btnNavbar {
    margin-left: 20px;
    padding-left: 8px;
    font-family: 'Roboto Mono', monospace;
    font-weight: 400;
    transition: color 0.3s;
  }
  .btnNavbar:hover {
    margin-left: 20px;
    color: var(--color-primary);
  }
  .btnNavbar:hover .colorBra {
    color: #fff;
  }

  @media (max-width: 768px) {
    .menu {
      flex-direction: column;
      position: fixed;
      align-items: center;
      left: 100%;
      top: 63px;
      width: 100%;
      height: calc(100% - 63px);
      padding-top: 60px;
      transition: left 0.3s;
      font-size: 30px;
      background-color: var(--color-bg);
      transition: all 0.6s;
    }
    .usermode {
      height: 40px;
      width: 40px;
      margin-top: 30px;
    }
    .btnNavbar {
      padding: 20px;
      border: none;
      margin: 0;
    }
    .btnNavbar:hover {
      margin: 0px;
    }
    .navToggle {
      display: block;
    }
    .menuOn {
      left: 0;
    }
    .menuOff {
      left: 100%;
    }
  }
  a {
    text-decoration: none;
    color: var(--color-text-base);
  }
  a:visited {
    color: var(--color-text-base);
  }
</style>
<script>
  // Code for toggle menu
  const navToggle = document.querySelector('.navToggle')
  const navMenu = document.querySelector('#menu')
  const linkAbout = document.querySelector('#linkAbout')
  const linkSkills = document.querySelector('#linkSkills')
  const linkProject = document.querySelector('#linkProject')
  const linkContact = document.querySelector('#linkContact')
  if (
    navToggle === null ||
    navMenu === null ||
    linkAbout === null ||
    linkSkills === null ||
    linkProject === null ||
    linkContact === null
  ) {
    throw new Error('No se encontró el botón de menú o el menú')
  }
  navToggle.addEventListener('click', () => {
    navMenu.classList.toggle('menuOn')
  })

  linkAbout.addEventListener('click', () => {
    navMenu.classList.toggle('menuOn')
  })
  linkProject.addEventListener('click', () => {
    navMenu.classList.toggle('menuOn')
  })
  linkSkills.addEventListener('click', () => {
    navMenu.classList.toggle('menuOn')
  })
  linkContact.addEventListener('click', () => {
    navMenu.classList.toggle('menuOn')
  })

  // Dark mode
  // const preferenceOS = window.matchMedia('(prefers-color-scheme: dark)').matches
  //   ? 'dark'
  //   : 'light'
  const mode = document.querySelector('.usermode')
  const setMode = (theme) => {
    document.documentElement.setAttribute('data-theme', theme)
    localStorage.setItem('theme', theme)
  }
  mode.addEventListener('click', () => {
    let toggleTheme = localStorage.getItem('theme') === 'dark' ? 'light' : 'dark'
    setMode(toggleTheme)
  })
  setMode(localStorage.getItem('theme') || 'dark') // default dark mode. Other option, use preferenceOS.

  // Easter egg :)
  let count = 0
  const harryPotterLumos = ['l', 'u', 'm', 'o', 's']
  const harryPotterNox = ['n', 'o', 'x']
  document.addEventListener('keydown', (e) => {
    if (e.key === harryPotterLumos[count]) {
      count++
      if (count === harryPotterLumos.length) {
        setMode('light')
        count = 0
      }
    } else if (e.key === harryPotterNox[count]) {
      count++
      if (count === harryPotterNox.length) {
        setMode('dark')
        count = 0
      }
    } else {
      count = 0
    }
  })
</script>
